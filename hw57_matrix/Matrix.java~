/***
 * class Matrix -- models a square matrix
 *
 * BACKGROUND:
 * A matrix is a rectangular array.
 * Its dimensions are numRows x numColumns.
 * Each element is indexed as (row,column): 
 *  eg,
 *   for 2 x 3 matrix M:
 *        -       -
 *   M =  | a b c |
 *        | d e f |
 *        -       -
 *   ... d is at position (2,1) or M[2,1] 
 *
 * TASK:
 * Implement methods below, categorize runtime of each. 
 * Test in main method.
 ***/


public class Matrix 
{
  //constant for default matrix size
  private final static int DEFAULT_SIZE = 2;

  private Object[][] matrix;

  //default constructor intializes a DEFAULT_SIZE*DEFAULT_SIZE matrix
    // O(1)
  public Matrix( ) 
	{
	    matrix= new Object[DEFAULT_SIZE][DEFAULT_SIZE];
  }


  //constructor intializes an a*a matrix
    //O(1)
  public Matrix( int a ) 
  {
      matrix= new Object[a][a];
  }


  //return size of this matrix, where size is 1 dimension
    // O(1)
  private int size() 
  {
      return matrix[0].length;
  }


  //return the item at the specified row & column
    //O(1)
  private Object get( int r, int c ) 
  {
      return matrix[r][c];
  }


  //return true if this matrix is empty, false otherwise
  private boolean isEmpty() 
  {
      return true;
  }


  //overwrite item at specified row and column with newVal
  //return old value
    // O(1)
  private Object set( int r, int c, Object newVal ) 
  {
      Object old= matrix[r][c];
      matrix[r][c]= newVal;
      return old;
  }


  //return String representation of this matrix
  // (make it look like a matrix)
    public String toString() 
    {
        
	for(Object[] r: matrix){
	    String row= "";
	    for (Object obj: r){
		row+=  obj+" ";
				
	    }
	    return row;
	}
    }


  //override inherited equals method
  //criteria for equality: matrices have identical dimensions,
  //and identical values in each slot
  public boolean equals( Object rightSide ) 
  {
      if (rightSide.size() != matrix.size())
	  {return false;}

      boolean valSame= true;

      for (int r=0; r< matrix.size();r++) {
	  for (int c=0; c< matrix.size(); c++){
	      if (!(rightSide[r][c].equals(matrix[r][c]))){
		  valSame=false;
		  break;
	      }
	  }
      }
      

      return valSame;
  }


  //swap two columns of this matrix 
  //(1,1) is top left corner of matrix
  //row values increase going down
  //column value increase L-to-R
  //public void swapColumns( int c1, int c2  ) 
  //{
  //}


  //swap two rows of this matrix 
  //(1,1) is top left corner of matrix
  //row values increase going down
  //column value increase L-to-R
  //public void swapRows( int r1, int r2  ) 
  //{
  //}


  //main method for testing
  public static void main( String[] args ) 
  {
  }

}//end class Matrix
